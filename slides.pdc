% ROOT and C++11
% Benjamin Bannier
% March 13, 2013

About me and Disclaimers
------------------------

Hi, I am [Benjamin Bannier](bbannier@gmail.com).

- graduate student at Stony Brook University
- Experimental Heavy Ion Physics with PHENIX/RHIC

I first used ROOT around 2004, and before that my only "programming experience"
was "data processing" with `awk`.

\vspace{.8em}

I *do like* C++ and use it daily.

But for plotting I use ROOT with Python or [matplotlib](http://matplotlib.org).

\vspace{.8em}

I have to realize daily that many things are too complex for me.

Why on earth C++?
-------------------
### Efficiency

### Type system
* statically typed
* reasonably extensible type system
* high-level abstractions, even with zero extra runtime cost

### Multiple paradigms
* interoperation of different programming styles

### C compatibility
* support for the C machine model
* reasonably easy to interact with C APIs


But \ldots!
-----------
### C++ is a *huge language*.

* C and C++ standard library
* C, C++, template metaprogramming, preprocessor macros

*You like C++ because you're only using 20% of it. And that's fine, everyone
only uses 20% of C++, the problem is that everyone uses a different 20% :)*
-- kingkilr, in [/r/programming](http://www.reddit.com/r/programming/comments/95qaz/ask_proggit_am_i_ok_recently_started_learning_c/)

### C++ can be extremely unsafe.

*C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do it blows your whole leg off.*
\mbox{\hspace{8em}--- B. Stroustrup}, [*Did you really say that?*](http://www.stroustrup.com/bs_faq.html#really-say-that)

The intersection of *{valid C++ programs}* and *{code you want to read/write/maintain}* is tiny.


C++ evolution
-------------

C++ stays mostly backwards-compatible with C.

When looking at the evolution of C++ what I find *most interesting* is what is
*added*

* higher level abstractions
* tools which allow writing safer code

In C++ design decisions are more and more abstracted into types, e.g.

* a *reference* is essentially a *"pointer which cannot be 0"*
* consistency with constructors and destructors (e.g. with RAII)
* `const` to annotate what should not change

Type constraints are documention and provide extra safety with zero cost at
runtime.

* * *

###  C++98, C++03

* started as a set of extensions on top of C
* 1st edition of *The C++ Programming Language* in 1985
* standardized in 1998, bug fix in 2003 (nothing new)
* compiler support for all features relatively late
* this is all there is to C++ in ROOT

\pause

### C++ Technical Report 1 (TR1)
* no new standard, only possible additions to standard library (often from [Boost](http://www.boost.org));
  [draft](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf) in
  2005, published 2007
* `tr1::shared_ptr`, `tr1::weak_ptr`, reference wrappers
*  `<type_traits>`
* `tr1::function`, `tr1::bind`, `tr1::mem_fun`
* `tr1::tuple`, `tr1::array`, and unordered sets and maps
* `<random>`, additional mathematical functions
* largely supported by most compilers (or via [Boost.TR1](http://www.boost.org/doc/libs/1_53_0/doc/html/boost_tr1.html))

* * *

### C++11 (selected)

* in the works for a long time, published 2011
* [N3337](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf) is
  a free draft very close to the published standard

<!-- -->

* most of TR1
* variadic templates
* uniform initialization
* $\lambda$ functions
* concurrency support
* rvalue references
* type deduction
* range-based for loops
* user-defined literals
* \ldots

Example applications
====================

`std::tuple` from TR1
---------------------

> A container for heterogeneous data

    tuple<double, int> tup(1.0, 42);
    // auto tup = make_tuple(1.0, 42);

    auto& v1 = get<0>(tup);        // double& v1
    get<0>(tup) = 2.2;             // now tup = (2.2, 42)

    tuple<int, int>    tup2 = tup; // tup2 = (2, 42)
    tuple<string, int> tup3 = tup; // won't compile

This could allow a safe way to pass arguments to `TTree::Fill`:

    template <typename ...Ts>
    Int_t TTree::Fill(const std::tuple<Ts...>& data);


Variadic templates: type-safe variadic functions
------------------------------------------------

Support
:   gcc-4.3/gcc-4.4, clang-2.9, icc-12.1, msvc-11.0

    // TNtuple.h
    virtual Int_t Fill(Float_t x0, Float_t x1=0, Float_t x2=0, 
                       Float_t x3=0, /* snip */
                       Float_t x14=0);    // (1)
    virtual Int_t Fill(const Float_t *x); // (2)

`(1)` could be generalized:

    template <typename ...Ts>
    virtual Int_t Fill(Ts... xs) {
      array<Float_t, sizeof...(Ts)> data{{xs...}};
      Fill(&data[0]);
    }

Due to type `array<Float_t, ...>` all `xs` are checked to be `Float_t` at compile time.

Make `(2)` accept an `array` or `vector`?

* * *

### How to get the first element?

    template <typename T, typename ...Ts>
    T head(T x, Ts...) {
      return x;
    }

### How to get the nth element?

Simplest via a temporary

    template <size_t n, typename ...Ts>
    auto get_nth(Ts... xs) -> decltype(get<n>(make_tuple(xs...))) {
      return get<n>(make_tuple(xs...));
    }

If we worry about compiler implementation quality we could use a recursive
template instead.

Initializer lists, uniform initialization
-----------------------------------------

> Consistent object construction

    TH1D h{"h", "", 100,0,10};
    int a[]{1, 2, 3};
    std::vector<int> v{1, 2, 3}

Makes it so easy to create objects that they can be used much more widely:

    int f(const array<int, 3>& a) { return a[1]; }
    f({1, 2, 3}); // int(2)

    // why not e.g.
    TH3::TH3(const char* name, const char* title,
             TAxis ax1, TAxis ax2, TAxis ax3);
    TH3D h3("h3", "", {100, 0, 10}, {10, 0, 10}, {300, 0, 20});

    // (even better with e.g. TAxis::TAxis(int, vector<double>))


Anonymous $\lambda$ functions and function objects
--------------------------------------------------

### C++98

    // function pointers
    int sum2(int x, int y) { return x+y; }
    int (*sum2p)(int, int) = sum2;
    sum2p(1, 2); // int(3)

    // functor
    struct {
      int operator()(int x, int y) { return x+y; }
    } sum1;
    sum1(1, 2);  // int(3)

* need to refer to something defined non-locally
* hard to store and pass polymorphically

* * *

### C++11

    auto sum1 = [](int x, int y) { return x+y; };
    function<int(int, int)> sum2 = sum1;
    int (*sum1p)(int, int) = sum1; 
    int (*sum2p)(int, int) = sum2; // doesn't work

    // defined somewhere: int f(int, int) 
    auto lf = f;
    function<int(int, int)> ff = f;

* `function` and function pointers live in disconnected worlds.
* polymorphic $\lambda$s [might be coming](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3418.pdf) soon

##### Support
`function`
:   was `tr1::function`

$\lambda$ functions
:   gcc-4.5, clang-3.1, icc-11.0, msvc-10.0

* * *

#### What already works

    // TF1("f", "x"); // formula only checked at runtime
    TF1 f("f", [](double* xs, double* ps) { return xs[0]; });

    TH1 *m_meas;  // measured distribution
    TH1 *m0, *m1; // simulated distributions (say stat. err = 0)
    TF1 sum("sum", [m0, m1](double* ms, double* ps) {
        double m = ms[0];
        double y0 = m0->Interpolate(m);
        double y1 = m1->Interpolate(m);
        return y0*ps[0] + y1*ps[1];
        }, 0, 10, 2);
    m_meas->Fit(&sum); // cannot use temporary here?

With $\lambda$ functions much of `TFormula` is dangerous convenience functionality.

Anywhere a function pointer is used now one could use `function` objects to
constraint types.

* * *

#### A step further

    TNtuple t("t", "", "x:y");
    for (unsigned i=0; i<100000; ++i)
      t.Fill(gRandom->Gaus(), gRandom->Gaus());

    // t.Draw("x", "x>0");

    // TNtuple
    t.Draw([](float* xs) { return xs[0]; },
           [](float* xs) { return xs[0] > 0; });

    // TTree
    t.Draw([](const tuple& xs) { return get<0>(xs); },
           [](const tuple& xs) { return get<0>(xs) > 0; });

Some scaffolding could make this look nicer, but not as nice as PyROOT; e.g.
use a `map` to provide clearer names.

Smart pointers
--------------

Ownership issues are one of the biggest source of confusion and bugs in code
against the ROOT API.

    // Who should manage the lifetime of a return value?
    Object* get(const string& name);

    // What are an object's dependencies?
    TFile f("f.root", "recreate");
    TH1* h = new TH1D("h", "", 100,0,1);
    f.Close();
    h->GetEntries();    // segfaults

Raw pointers do not help in answering any of these questions.

Smart pointers encode design decisions into types, and have largely replaced
raw pointers in the C++ world.

* * *

#### From TR1
`shared_ptr`
:   reference-counted pointer, shared ownership
`weak_ptr`
:   non-owning reference to a `shared_ptr`

#### C++11
`unique_ptr`
:   unique ownership

Designing an API with shared ownership is hard because designing consistent
dependencies is hard.

Smart pointers document and abstract the design away in types.

A compiler can check correct use.

* * *

#### One more look at the example
    TFile f("f.root", "recreate");
    TH1* h = new TH1D("h", "", 100,0,1);
    f.Close();
    h->GetEntries();    // segfaults

Who owns what here?\pause

    TList* TDirectory::fList;    // f holds pointer to h
    TDirectory* TH1::fDirectory; // h holds pointer to f

We need to specify who should outlive the other.

* * *
Here `h` depends on `f`, but not the other way around.

Just an idea:

    shared_ptr<TDirectory> gDirectory;

    // only allow TFile to be created with factory
    shared_ptr<TFile> TFile::Open(..) {
      // ...  TFileOpenHandle *fh = 0;
      return make_shared<TFile>(fh);
    }

    // h should have shared ownership of f
    shared_ptr<TDirectory> TH1::fDirectory

\pause

There are 1000s of similar issues in the ROOT codebase.

Annotating pointer use policy would be a start so one could selectively "turn on"
smart pointers in completely annotated sections.

Concurrency
-----------

#### C++98
* no notion of concurrency in standard library
* `pthreads` is a widely available multithreading C API
    - little type safety
    - doesn't integrate too nicely into C++ code
* concurrent code is an expert topic

#### C++11
* high-level abstractions for
    - asynchronous code
    - multithreaded code
    - lock management
* even beginners might use it

* * *

    TH1* h = ... ;
    vector<TF1> fs = { ... };

    vector<future<TFitResultPtr>> fits;

    for (auto& f : fs)
      fits.push_back( async([&]() {

            return h->Fit(&f);
            }) );

    for (auto& fit : fits)
      fit.get().Get()->Print();

\pause

`TH1::Fit` not `const` --- one shouldn't expect it to be thread-safe!  
&nbsp;  
&nbsp;  
&nbsp;  

* * *

    TH1* h = ... ;
    vector<TF1> fs = { ... };

    vector<future<TFitResultPtr>> fits;
    mutex h_m;
    for (auto& f : fs)
      fits.push_back( async([&]() {
            lock_guard<mutex> lock(h_m); // yes, boring now
            return h->Fit(&f);
            }) );

    for (auto& fit : fits)
      fit.get().Get()->Print();

\pause

* `TFitResultPtr::Get` and `TF1::Print` are `const` -- would expect this to work
* might still break if object in `future` doesn't stay consistent

* * *

#### Library writer guidelines for thread-safe code

* **always** make sure objects stay consistent
* `const` methods are always thread-safe
    -  use `mutable` members if internal synchronisation is needed
* non-`const` methods might need synchronisation by user

##### Optimizations (for performance or maintenance)

* avoid locking: minimize shared or global state
* avoid locking: minimize shared or global state
* avoid locking: minimize shared or global state


**Making a library thread-safe leads to a cleaner design.**

* * *

\vspace{-.2em}
\hfill\includegraphics[width=0.7\textwidth]{auto-soda-billy-mays-advertising-197253.jpeg}\hspace{-1.1cm}

Range-based `for` loops
-----------------------

> Sugar-coated iteration

    ListT list;
    for (auto& element : list) { /* do something with element */ }

The interface `ListT` needs to provide

    for (auto __begin = begin-expr, // begin(T) or T::begin()
                __end = end-expr;   // end(T)   or T::end()
         __begin != __end;          // iterator operator!=
         ++__begin ) {              // iterator operator++
      for-range-declaration = *__begin;
      // statement
    }

* * *

    // only non-const version here
    struct TIteratorPtr {
      TIterator* it = nullptr;
      TIteratorPtr(TIterator* it) : it(it) { }

      TIteratorPtr& operator++() {
        if (not it->Next()) it = nullptr;
        return *this;
      }
      TObject* operator*() { return **it; }
      bool operator!=(const TIteratorPtr& rhs) const {
        return it != rhs.it;
      }
    };

    TIteratorPtr begin(TCollection& c) {
      return ++TIteratorPtr(c.MakeIterator());
    }
    TIteratorPtr end  (TCollection& c) { return nullptr; }

Rvalue references
-----------------
**TODO**

* language-level support to work efficiently with temporaries
* mostly uninteresting for ROOT since it uses reference semantics anyway (a.k.a.
      pointers everywhere)?

* cannot work with C++98

Enhancements to constructors
----------------------------
**TODO**

* `=default`, `=delete`, `=override`, `=final`
* inherited constructors


* most of this stuff just makes implementing easier
* cannot work with C++98

User-defined literals
---------------------
**TODO**

* e.g. to define quantities with units
* cannot work with C++98

Enums
-----
**TODO**

* cannot work with C++98

<!--
* <http://nealford.com/memeagora/2013/01/22/why_everyone_eventually_hates_maven.html>
-->
